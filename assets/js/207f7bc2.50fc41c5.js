"use strict";(self.webpackChunkdigicard_docs=self.webpackChunkdigicard_docs||[]).push([[4134],{7384:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>c,contentTitle:()=>s,default:()=>d,frontMatter:()=>o,metadata:()=>i,toc:()=>l});var t=r(4848),a=r(8453);const o={id:"source-code",title:"Source Code Documentation"},s="Documentation du Code Source",i={id:"system-docs/source-code",title:"Source Code Documentation",description:"Structure du Code",source:"@site/docs/system-docs/source-code.md",sourceDirName:"system-docs",slug:"/system-docs/source-code",permalink:"/Documentation-Digicard-Qr-Code-Scanner1/docs/system-docs/source-code",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/system-docs/source-code.md",tags:[],version:"current",frontMatter:{id:"source-code",title:"Source Code Documentation"}},c={},l=[{value:"Structure du Code",id:"structure-du-code",level:2},{value:"Exemples de Code",id:"exemples-de-code",level:2},{value:"<code>App.tsx</code>",id:"apptsx",level:3},{value:"<code>ScanScreen.tsx</code>",id:"scanscreentsx",level:3}];function u(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"documentation-du-code-source",children:"Documentation du Code Source"})}),"\n",(0,t.jsx)(n.h2,{id:"structure-du-code",children:"Structure du Code"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsxs)(n.strong,{children:[(0,t.jsx)(n.code,{children:"App.tsx"})," :"]})," Fichier principal de l'application, g\xe8re la navigation et l'authentification."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsxs)(n.strong,{children:[(0,t.jsx)(n.code,{children:"src/screens/ScanScreen.tsx"})," :"]})," \xc9cran de scan de QR code."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsxs)(n.strong,{children:[(0,t.jsx)(n.code,{children:"src/screens/HistoryScreen.tsx"})," :"]})," \xc9cran de l'historique des scans."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsxs)(n.strong,{children:[(0,t.jsx)(n.code,{children:"src/screens/FavoritesScreen.tsx"})," :"]})," \xc9cran des favoris."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsxs)(n.strong,{children:[(0,t.jsx)(n.code,{children:"src/screens/ResultScreen.tsx"})," :"]})," \xc9cran des r\xe9sultats de scan."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsxs)(n.strong,{children:[(0,t.jsx)(n.code,{children:"src/components/UserScreen.tsx"})," :"]})," \xc9cran utilisateur."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsxs)(n.strong,{children:[(0,t.jsx)(n.code,{children:"src/components/SettingsScreen.tsx"})," :"]})," \xc9cran des param\xe8tres."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsxs)(n.strong,{children:[(0,t.jsx)(n.code,{children:"src/components/FingerprintAuthScreen.tsx"})," :"]})," \xc9cran d'authentification biom\xe9trique."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsxs)(n.strong,{children:[(0,t.jsx)(n.code,{children:"src/components/CustomDrawerContent.tsx"})," :"]})," Contenu personnalis\xe9 du tiroir de navigation."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsxs)(n.strong,{children:[(0,t.jsx)(n.code,{children:"src/Context/AuthContext.tsx"})," :"]})," Contexte d'authentification."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsxs)(n.strong,{children:[(0,t.jsx)(n.code,{children:"src/components/AuthGuard.tsx"})," :"]})," Gardien d'authentification."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsxs)(n.strong,{children:[(0,t.jsx)(n.code,{children:"src/screens/LoadingScreen.tsx"})," :"]})," \xc9cran de chargement pendant la v\xe9rification de l'authentification."]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"exemples-de-code",children:"Exemples de Code"}),"\n",(0,t.jsx)(n.h3,{id:"apptsx",children:(0,t.jsx)(n.code,{children:"App.tsx"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"import React, { useEffect, useState, useContext } from 'react';\r\nimport { NavigationContainer, NavigationContainerRef } from '@react-navigation/native';\r\nimport { createDrawerNavigator } from '@react-navigation/drawer';\r\nimport { View, StyleSheet, TouchableOpacity, BackHandler, Alert, AppState, AppStateStatus, Text } from 'react-native';\r\nimport ScanScreen from './src/screens/ScanScreen'; // Importation de l'\xe9cran de scan\r\nimport HistoryScreen from './src/screens/HistoryScreen'; // Importation de l'\xe9cran de l'historique\r\nimport FavoritesScreen from './src/screens/FavoritesScreen'; // Importation de l'\xe9cran des favoris\r\nimport ResultScreen from './src/screens/ResultScreen'; // Importation de l'\xe9cran des r\xe9sultats\r\nimport UserScreen from './src/components/UserScreen'; // Importation de l'\xe9cran utilisateur\r\nimport SettingsScreen from './src/components/SettingsScreen'; // Importation de l'\xe9cran des param\xe8tres\r\nimport FingerprintAuthScreen from './src/components/FingerprintAuthScreen'; // Importation de l'\xe9cran d'authentification biom\xe9trique\r\nimport CustomDrawerContent from './src/components/CustomDrawerContent'; // Importation du contenu personnalis\xe9 du tiroir\r\nimport { MaterialIcons, FontAwesome } from '@expo/vector-icons';\r\nimport { MenuProvider, Menu, MenuOptions, MenuOption, MenuTrigger } from 'react-native-popup-menu'; // Menu contextuel\r\nimport { AuthProvider, AuthContext } from './src/Context/AuthContext'; // Contexte d'authentification\r\nimport AuthGuard from './src/components/AuthGuard'; // Gardien d'authentification\r\nimport LoadingScreen from './src/screens/LoadingScreen'; // \xc9cran de chargement pendant la v\xe9rification de l'authentification\r\n\r\nconst navigationRef = React.createRef<NavigationContainerRef<any>>(); // R\xe9f\xe9rence pour la navigation\r\nconst Drawer = createDrawerNavigator(); // Cr\xe9ation du tiroir de navigation\r\n\r\nconst App: React.FC = () => {\r\n  const [isLoading, setIsLoading] = useState(true); // Indicateur de chargement\r\n  const { checkAuthStatus } = useContext(AuthContext); // V\xe9rification de l'\xe9tat d'authentification\r\n\r\n  // V\xe9rification de l'\xe9tat d'authentification au d\xe9marrage\r\n  useEffect(() => {\r\n    const checkAuthStatusOnStart = async () => {\r\n      await checkAuthStatus(); // Appel asynchrone pour v\xe9rifier l'authentification\r\n      setIsLoading(false); // D\xe9sactive le chargement apr\xe8s la v\xe9rification\r\n    };\r\n\r\n    checkAuthStatusOnStart();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const handleBackPress = () => {\r\n      if (!navigationRef.current) {\r\n        return false;\r\n      }\r\n\r\n      const currentRoute = navigationRef.current.getCurrentRoute();\r\n      if (currentRoute?.name === 'Scan') {\r\n        Alert.alert(\r\n          'Exit App',\r\n          'Are you sure you want to exit the app?',\r\n          [\r\n            { text: 'Cancel', style: 'cancel' },\r\n            { text: 'Yes', onPress: () => BackHandler.exitApp() },\r\n          ]\r\n        );\r\n        return true; // Prevent default behavior\r\n        \r\n      } else {\r\n        navigationRef.current.navigate('Scan');\r\n        return true; // Prevent default behavior\r\n      }\r\n    };\r\n\r\n    // Abonnement \xe0 l'\xe9v\xe9nement de retour sur Android\r\n    const backHandlerSubscription = BackHandler.addEventListener('hardwareBackPress', handleBackPress);\r\n    return () => backHandlerSubscription.remove(); // Nettoyage lors de la destruction du composant\r\n  }, []);\r\n\r\n  // V\xe9rifie l'authentification lorsque l'application revient au premier plan\r\n  useEffect(() => {\r\n    const handleAppStateChange = async (nextAppState: AppStateStatus) => {\r\n      if (nextAppState === 'active') {\r\n        await checkAuthStatus(); // R\xe9v\xe9rifie l'authentification\r\n      }\r\n    };\r\n\r\n    // Abonnement \xe0 l'\xe9v\xe9nement de changement d'\xe9tat de l'application\r\n    const subscription = AppState.addEventListener('change', handleAppStateChange);\r\n    return () => subscription.remove(); // Nettoyage lors de la destruction du composant\r\n  }, []);\r\n\r\n  if (isLoading) {\r\n    return <LoadingScreen />; // Affiche l'\xe9cran de chargement pendant l'authentification\r\n  }\r\n\r\n  return (\r\n    <AuthProvider>\r\n      <MenuProvider>\r\n        <NavigationContainer ref={navigationRef}>\r\n          <AuthGuard>\r\n            <Drawer.Navigator\r\n              initialRouteName=\"Scan\" // D\xe9finir l'\xe9cran de scan comme route initiale\r\n              drawerContent={(props) => <CustomDrawerContent {...props} />} // Contenu personnalis\xe9 du tiroir\r\n            >\r\n              {/* \xc9cran de scan QR avec des options pour contr\xf4ler la cam\xe9ra */}\r\n              <Drawer.Screen\r\n                name=\"Scan\"\r\n                component={ScanScreen}\r\n                options={({ navigation }) => ({\r\n                  drawerIcon: ({ color, size }) => (\r\n                    <MaterialIcons name=\"camera-alt\" size={size} color={color} />\r\n                  ),\r\n                  headerTransparent: true,\r\n                  headerTitle: '',\r\n                  headerLeft: () => (\r\n                    <TouchableOpacity onPress={() => navigation.openDrawer()} style={styles.iconButton}>\r\n                      <MaterialIcons name=\"menu\" size={24} color=\"white\" />\r\n                    </TouchableOpacity>\r\n                  ),\r\n                  headerRight: () => (\r\n                    <View style={styles.headerRight}>\r\n                      <TouchableOpacity style={styles.iconButton} onPress={() => navigation.navigate('Scan', { action: 'toggleTorch' })}>\r\n                        <MaterialIcons name=\"flash-on\" size={24} color=\"white\" />\r\n                      </TouchableOpacity>\r\n                      <TouchableOpacity style={styles.iconButton} onPress={() => navigation.navigate('Scan', { action: 'switchCamera' })}>\r\n                        <MaterialIcons name=\"rotate-right\" size={24} color=\"white\" />\r\n                      </TouchableOpacity>\r\n                      <TouchableOpacity style={styles.iconButton} onPress={() => navigation.navigate('Scan', { action: 'zoomIn' })}>\r\n                        <MaterialIcons name=\"zoom-in\" size={24} color=\"white\" />\r\n                      </TouchableOpacity>\r\n                      <TouchableOpacity style={styles.iconButton} onPress={() => navigation.navigate('Scan', { action: 'zoomOut' })}>\r\n                        <MaterialIcons name=\"zoom-out\" size={24} color=\"white\" />\r\n                      </TouchableOpacity>\r\n                    </View>\r\n                  ),\r\n                })}\r\n              />\r\n              <Drawer.Screen\r\n                name=\"History\"\r\n                component={HistoryScreen}\r\n                options={({ navigation }) => ({\r\n                  drawerIcon: ({ color, size }) => (\r\n                    <MaterialIcons name=\"history\" size={size} color={color} />\r\n                  ),\r\n                  headerTransparent: false,\r\n                  headerTitle: 'History',\r\n                  headerRight: () => (\r\n                    <View style={styles.headerRightMenu}>\r\n                      <Menu>\r\n                        <MenuTrigger>\r\n                          <MaterialIcons name=\"more-vert\" size={24} color=\"black\" />\r\n                        </MenuTrigger>\r\n                        <MenuOptions>\r\n                          <MenuOption onSelect={() => navigation.navigate('History', { action: 'sortByDate' })}>\r\n                            <Text style={styles.menuOptionText}>Sort by Date</Text>\r\n                          </MenuOption>\r\n                          <MenuOption onSelect={() => navigation.navigate('History', { action: 'sortByType' })}>\r\n                            <Text style={styles.menuOptionText}>Sort by Type</Text>\r\n                          </MenuOption>\r\n                          <MenuOption onSelect={() => navigation.navigate('History', { action: 'clearHistory' })}>\r\n                            <Text style={styles.menuOptionText}>Clear history</Text>\r\n                          </MenuOption>\r\n                        </MenuOptions>\r\n                      </Menu>\r\n                    </View>\r\n                  ),\r\n                })}\r\n              />\r\n              <Drawer.Screen\r\n                name=\"Favorites\"\r\n                component={FavoritesScreen}\r\n                options={{\r\n                  drawerIcon: ({ color, size }) => (\r\n                    <FontAwesome name=\"star\" size={size} color={color} />\r\n                  ),\r\n                  headerTransparent: false,\r\n                  headerTitle: 'Favorites',\r\n                }}\r\n              />\r\n              <Drawer.Screen\r\n                name=\"Result\"\r\n                component={ResultScreen}\r\n                options={({ navigation }) => ({\r\n                  headerTransparent: false,\r\n                  headerTitle: 'Result',\r\n                  drawerItemStyle: { display: 'none' },\r\n                  headerLeft: () => (\r\n                    <TouchableOpacity onPress={() => navigation.goBack()} style={styles.iconButton}>\r\n                      <MaterialIcons name=\"arrow-back\" size={24} color=\"black\" />\r\n                    </TouchableOpacity>\r\n                  ),\r\n                })}\r\n              />\r\n              <Drawer.Screen\r\n                name=\"User\"\r\n                component={UserScreen}\r\n                options={{\r\n                  drawerIcon: ({ color, size }) => (\r\n                    <MaterialIcons name=\"person\" size={size} color={color} />\r\n                  ),\r\n                  headerTransparent: false,\r\n                  headerTitle: 'User',\r\n                }}\r\n              />\r\n              <Drawer.Screen\r\n                name=\"Settings\"\r\n                component={SettingsScreen}\r\n                options={{\r\n                  drawerIcon: ({ color, size }) => (\r\n                    <MaterialIcons name=\"settings\" size={size} color={color} />\r\n                  ),\r\n                  headerTransparent: false,\r\n                  headerTitle: 'Settings',\r\n                }}\r\n              />\r\n            </Drawer.Navigator>\r\n          </AuthGuard>\r\n        </NavigationContainer>\r\n      </MenuProvider>\r\n    </AuthProvider>\r\n  );\r\n};\r\n\r\n// Styles pour les ic\xf4nes et les menus\r\nconst styles = StyleSheet.create({\r\n  loadingContainer: {\r\n    flex: 1,\r\n    justifyContent: 'center',\r\n    alignItems: 'center',\r\n  },\r\n  iconButton: {\r\n    padding: 10,\r\n  },\r\n  headerRight: {\r\n    flexDirection: 'row',\r\n  },\r\n  headerRightMenu: {\r\n    flexDirection: 'row',\r\n    marginRight: 10, // Add marginRight to move the menu button away from the edge\r\n  },\r\n  menuOptionText: {\r\n    padding: 10,\r\n    fontSize: 16,\r\n  },\r\n});\r\n\r\nexport default App;\n"})}),"\n",(0,t.jsx)(n.h3,{id:"scanscreentsx",children:(0,t.jsx)(n.code,{children:"ScanScreen.tsx"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"import React, { useState, useEffect } from 'react';\r\nimport { View, Text, Button, TouchableOpacity, StyleSheet, Alert } from 'react-native';\r\nimport { CameraView, CameraType, useCameraPermissions } from 'expo-camera';\r\nimport { FontAwesome, Entypo } from '@expo/vector-icons';\r\nimport { useNavigation, useRoute, NavigationProp, RouteProp } from '@react-navigation/native';\r\nimport * as ImagePicker from 'expo-image-picker';\r\nimport { analyzeQRCode } from '../utils/analyzeQRCode';\r\nimport { postData } from '../../api'; // Assurez-vous que le chemin est correct\r\n\r\n// Types des param\xe8tres utilis\xe9s dans les routes de navigation\r\ntype RootStackParamList = {\r\n  Scan: { action?: string }; // Param\xe8tre optionnel pour indiquer l'action \xe0 effectuer lors du scan\r\n  Result: { type: string; data: string; id: number; imageUrl: string }; // Param\xe8tres \xe0 passer lors de la navigation vers l'\xe9cran des r\xe9sultats\r\n  History: undefined; // Aucun param\xe8tre requis pour l'historique\r\n  Favorites: undefined; // Aucun param\xe8tre requis pour les favoris\r\n};\r\n\r\n// Composant principal pour l'\xe9cran de scan\r\nconst ScanScreen: React.FC = () => {\r\n  // \xc9tats locaux pour g\xe9rer la cam\xe9ra, la torche, le zoom, etc.\r\n  const [facing, setFacing] = useState<CameraType>('back'); // Cam\xe9ra arri\xe8re par d\xe9faut\r\n  const [torch, setTorch] = useState<boolean>(false); // La torche est d\xe9sactiv\xe9e par d\xe9faut\r\n  const [zoom, setZoom] = useState(0); // Niveau de zoom initial\r\n  const [lastScannedCode, setLastScannedCode] = useState<string | null>(null); // Dernier code scann\xe9\r\n  const [isScanning, setIsScanning] = useState(false); // Indicateur pour \xe9viter les scans multiples\r\n  const [permission, requestPermission] = useCameraPermissions(); // Permissions pour utiliser la cam\xe9ra\r\n  const navigation = useNavigation<NavigationProp<RootStackParamList>>(); // Navigation entre les \xe9crans\r\n  const route = useRoute<RouteProp<RootStackParamList, 'Scan'>>(); // Acc\xe8s aux param\xe8tres de la route actuelle\r\n\r\n  // useEffect pour g\xe9rer les actions re\xe7ues via les param\xe8tres de navigation\r\n  useEffect(() => {\r\n    if (route.params?.action) {\r\n      if (route.params.action === 'toggleTorch') {\r\n        toggleTorch(); // Si l'action est \"toggleTorch\", on active/d\xe9sactive la torche\r\n      } else if (route.params.action === 'switchCamera') {\r\n        switchCamera(); // Si l'action est \"switchCamera\", on change la cam\xe9ra\r\n      } else if (route.params.action === 'zoomIn') {\r\n        zoomIn(); // Zoom avant\r\n      } else if (route.params.action === 'zoomOut') {\r\n        zoomOut(); // Zoom arri\xe8re\r\n      }\r\n    }\r\n  }, [route.params?.action]); // D\xe9pendance sur les param\xe8tres de la route\r\n\r\n  // Si la permission pour la cam\xe9ra n'a pas encore \xe9t\xe9 demand\xe9e\r\n  if (!permission) {\r\n    return <View />;\r\n  }\r\n\r\n  // Si la permission n'est pas accord\xe9e, on affiche un message et un bouton pour demander la permission\r\n  if (!permission.granted) {\r\n    return (\r\n      <View style={styles.container2}>\r\n        <Text style={styles.message}>Nous avons besoin de la permission pour utiliser la cam\xe9ra</Text>\r\n        <Button onPress={requestPermission} title=\"Autoriser la cam\xe9ra\" />\r\n      </View>\r\n    );\r\n  }\r\n\r\n  // Fonction pour changer la cam\xe9ra (avant/arri\xe8re)\r\n  const switchCamera = () => {\r\n    setFacing(current => (current === 'back' ? 'front' : 'back'));\r\n  };\r\n\r\n  // Fonction pour activer/d\xe9sactiver la torche\r\n  const toggleTorch = () => {\r\n    setTorch(current => !current);\r\n  };\r\n\r\n  // Fonction pour zoomer\r\n  const zoomIn = () => {\r\n    setZoom(current => (current < 1 ? current + 0.1 : 1)); // Limite le zoom \xe0 1 (maximum)\r\n  };\r\n\r\n  // Fonction pour d\xe9zoomer\r\n  const zoomOut = () => {\r\n    setZoom(current => (current > 0 ? current - 0.1 : 0)); // Limite le zoom minimum \xe0 0\r\n  };\r\n\r\n  // Gestion de l'\xe9v\xe9nement de scan de code-barres\r\n  const handleBarcodeScanned = async (scanningResult: { type: string; data: string }) => {\r\n    // Si le code est d\xe9j\xe0 scann\xe9 ou si un scan est en cours, on ignore\r\n    if (isScanning || scanningResult.data === lastScannedCode) {\r\n      return;\r\n    }\r\n\r\n    setIsScanning(true);\r\n    setLastScannedCode(scanningResult.data); // On enregistre le dernier code scann\xe9\r\n\r\n    // Analyse du QR Code avec la fonction utilitaire\r\n    const { type, content } = analyzeQRCode(scanningResult.data);\r\n\r\n    // Traitement c\xf4t\xe9 serveur (backend)\r\n    try {\r\n      const response = await postData('scans', { type, data: scanningResult.data, userId: 1 });\r\n\r\n      if (response.success) {\r\n        // Si tout se passe bien, on navigue vers l'\xe9cran des r\xe9sultats\r\n        navigation.navigate('Result', { type, data: content, id: response.scanId, imageUrl: response.imageUrl });\r\n      } else {\r\n        Alert.alert('Erreur', response.message); // Affichage d'une alerte en cas d'erreur\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Erreur lors de la requ\xeate ! \" + error);\r\n      Alert.alert('Erreur', '\xc9chec du traitement du scan.'); // Gestion des erreurs\r\n    } finally {\r\n      setIsScanning(false); // R\xe9initialisation de l'\xe9tat de scan\r\n    }\r\n  };\r\n\r\n  // Fonction pour choisir une image depuis la galerie\r\n  const pickImage = async () => {\r\n    let result = await ImagePicker.launchImageLibraryAsync({\r\n      mediaTypes: ImagePicker.MediaTypeOptions.Images,\r\n      allowsEditing: true,\r\n      aspect: [4, 3],\r\n      quality: 1,\r\n    });\r\n\r\n    if (!result.canceled) {\r\n      console.log(\"Image s\xe9lectionn\xe9e :\", result.assets[0].uri); // Log de l'URI de l'image\r\n    }\r\n  };\r\n\r\n  // Rendu de l'interface utilisateur\r\n  return (\r\n    <View style={styles.container}>\r\n      <CameraView\r\n        style={styles.camera}\r\n        facing={facing} // Cam\xe9ra s\xe9lectionn\xe9e\r\n        enableTorch={torch} // Torche activ\xe9e/d\xe9sactiv\xe9e\r\n        zoom={zoom} // Niveau de zoom\r\n        onBarcodeScanned={handleBarcodeScanned} // Gestionnaire d'\xe9v\xe9nements pour le scan\r\n      >\r\n        <View style={styles.scannerFrame}>\r\n          <View style={styles.scannerFrameInner} />\r\n        </View>\r\n      </CameraView>\r\n      <View style={styles.footer}>\r\n        <TouchableOpacity style={styles.footerButton} onPress={() => navigation.navigate('History')}>\r\n          <FontAwesome name=\"history\" size={24} color=\"black\" />\r\n          <Text>Historique</Text>\r\n        </TouchableOpacity>\r\n        <TouchableOpacity style={styles.scanButton} onPress={pickImage}>\r\n          <Entypo name=\"image\" size={24} color=\"white\" />\r\n        </TouchableOpacity>\r\n        <TouchableOpacity style={styles.footerButton} onPress={() => navigation.navigate('Favorites')}>\r\n          <FontAwesome name=\"heart\" size={24} color=\"black\" />\r\n          <Text>Favoris</Text>\r\n        </TouchableOpacity>\r\n      </View>\r\n    </View>\r\n  );\r\n};\r\n\r\n// Styles pour le composant\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flex: 1,\r\n    backgroundColor: '#fff',\r\n  },\r\n  camera: {\r\n    flex: 1,\r\n    width: '100%',\r\n  },\r\n  scannerFrame: {\r\n    flex: 1,\r\n    justifyContent: 'center',\r\n    alignItems: 'center',\r\n  },\r\n  scannerFrameInner: {\r\n    width: 200,\r\n    height: 200,\r\n    borderWidth: 2,\r\n    borderColor: '#00FF00',\r\n    borderRadius: 10,\r\n  },\r\n  footer: {\r\n    position: 'absolute',\r\n    bottom: 0,\r\n    width: '100%',\r\n    flexDirection: 'row',\r\n    justifyContent: 'space-around',\r\n    alignItems: 'center',\r\n    backgroundColor: '#f8f8f8',\r\n    paddingVertical: 10,\r\n    borderTopWidth: 1,\r\n    borderTopColor: '#ddd',\r\n    height: 95,\r\n  },\r\n  footerButton: {\r\n    alignItems: 'center',\r\n    flex: 1,\r\n  },\r\n  scanButton: {\r\n    width: 60,\r\n    height: 60,\r\n    borderRadius: 30,\r\n    backgroundColor: '#000',\r\n    justifyContent: 'center',\r\n    alignItems: 'center',\r\n    marginBottom: 20,\r\n  },\r\n  container2: {\r\n    flex: 1,\r\n    justifyContent: 'center',\r\n    alignItems: 'center',\r\n  },\r\n  message: {\r\n    textAlign: 'center',\r\n    paddingBottom: 10,\r\n    color: 'black',\r\n  },\r\n});\r\n\r\nexport default ScanScreen;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n"})})]})}function d(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(u,{...e})}):u(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>s,x:()=>i});var t=r(6540);const a={},o=t.createContext(a);function s(e){const n=t.useContext(o);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:s(e.components),t.createElement(o.Provider,{value:n},e.children)}}}]);